@function gtkalpha($c, $a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$asset_suffix: if($variant == "dark", "-dark", "");

* {
  padding: 0;
  -GtkToolButton-icon-spacing: 2;
  -GtkTextView-error-underline-color: $error_color;

  // The size for scrollbars. The slider is 2px smaller, but we keep it
  // up so that the whole area is sensitive to button presses for the
  // slider. The stepper button is larger in both directions, the slider
  // only in the width

  -GtkScrolledWindow-scrollbar-spacing: 0;
  -GtkToolItemGroup-expander-size: 11;
  -GtkWidget-text-handle-width: 20;
  -GtkWidget-text-handle-height: 20;
  -GtkDialog-button-spacing: 2;
  -GtkDialog-action-area-border: 0;

  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.

  outline-color: gtkalpha(currentColor, 0.3);
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  -gtk-outline-radius: $standard_radius / 2;
  -gtk-secondary-caret-color: $primary_color;
}

/***************
 * Base States *
 ***************/
.background, paned, .gedit-view text {
  background-color: $bg_color;

  //box-shadow: $background_inset_shadow;
  color: $fg_color;
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

//*:disabled { -gtk-icon-filter: opacity(0.5); }

.gtkstyle-fallback {
  color: $fg_color;
  background-color: $bg_color;

  &:hover {
    color: $fg_color;
    background-color: lighten($bg_color, 10%);
  }

  &:active {
    color: $fg_color;
    background-color: darken($bg_color, 10%);
  }

  &:disabled {
    color: $disabled_fg_color;
    background-color: $disabled_bg_color;
  }

  &:selected {
    color: $highlighted_fg_color;
    background-color: $primary_color;
  }
}

.view,
%view {
  color: $fg_color;
  background-color: $lighter_bg_color;

  &:disabled {
    color: $disabled_fg_color;
    background-color: $disabled_bg_color;
  }

  &:selected {
    &:focus, & {
      @extend %selected_items;
    }
  }
}

.view,
textview {
  text {
    @extend %view;

    selection {
      &:focus, & {
        @extend %selected_items;
      }
    }
  }
}

textview border {
  background-color: mix($bg_color, $base_color, 50%);
}

iconview {
  @extend .view;
}

.rubberband,
rubberband {
  border: 1px solid darken($primary_color, 10%);
  background-color: transparentize(darken($primary_color, 10%), 0.8);
}

flowbox {
  rubberband {
    @extend rubberband;
  }

  flowboxchild {
    padding: 2px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 1px;
  border-radius: 0;
  padding: 0;
}

label {
  caret-color: currentColor;

  // this shouldn't be needed.

  &.separator {
    @extend .dim-label;

    color: $fg_color;
  }

  row:selected &,
  &:selected {
    @extend %nobg_selected_items;
  }

  selection {
    background-color: $primary_color;
    color: $highlighted_fg_color;
  }

  &:disabled {
    color: $disabled_fg_color;

    selection {
      @extend %selected_items:disabled;
    }
  }
}

.dim-label {
  opacity: 0.55;
}

assistant {
  .sidebar {
    padding: ($container_padding - 2) 0;

    .sidebar label {
      min-height: $medium_size;
      padding: 0 12px;
      color: $secondary_fg_color;
      font-weight: 500;

      &.highlight {
        color: $fg_color;
      }
    }
  }
}

%osd,
.osd {
  color: $fg_color;
  border: none;
  border-radius: 0px;
  background-color: $lighter_bg_color;

  // box-shadow: $shadow_bottom $primary_color;
  background-clip: padding-box;
  -gtk-icon-shadow: none;
}

/*********************
 * Spinner Animation *
 *********************/
@keyframes spin {
  to {
    -gtk-icon-transform: rotate(1turn);
  }
}

spinner {
  background: none;
  opacity: 0;

  // non spinning spinner makes no sense
  -gtk-icon-source: -gtk-icontheme("process-working-symbolic");

  &:checked {
    color: $primary_color;
    opacity: 1;
    animation: spin 1s linear infinite;

    &:disabled {
      opacity: 0.5;
    }
  }
}

/****************
 * Text Entries *
 ****************/

%entry,
entry {
  %entry_basic, & {
    min-height: $normal_size;
    padding: $small_padding $normal_padding;
    border: 1px solid $border_color;
    box-shadow: $button_highlight $button_highlight_color;
    border-radius: $standard_radius;
    transition: all 200ms $ease-out-quad;

    @include entry(normal);

    &.search :last-child {
      // result counter in frame
      margin: 2px 0;
    }

    image, arrow, label {
      transition: $standard_transition;

      // icons inside the entry

      &.left {
        margin-right: $container_padding;
      }

      &.right {
        margin-left: $container_padding;
      }

      &.left, &.right {
        &:hover {
          color: $primary_color;
        }

        &:active {
          color: _pressed_shade($primary_color);
        }
      }
    }

    undershoot {
      &.left {
        @include undershoot(left);
      }

      &.right {
        @include undershoot(right);
      }
    }

    &.flat {
      &:focus, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:focus {
      @include entry(focus);
    }

    &:disabled {
      @include entry(disabled);
    }

    selection {
      @extend %selected_items;
    }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_color), (warning, $warning_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus {
          @include entry(focus, $e_color);
        }

        selection {
          background-color: $e_color;
        }
      }
    }

    image {
      // entry icons colors
      color: mix($fg_color, $base_color, 80%);

      &:hover {
        color: $fg_color;
      }

      &:active {
        color: $primary_color;
      }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $info_color;
        box-shadow: inset 0 0 0 1px $info_color;
      }
    }

    .osd & {
      @include entry(normal);

      &:focus {
        @include entry(focus);
      }

      &:disabled {
        @include entry(disabled);
      }
    }
  }

  progress {
    margin: 2px -6px;
    background-color: transparent;
    background-image: none;
    border-radius: 0;
    border-width: 0 0 2px;
    border-color: $progress_color;
    border-style: solid;
    box-shadow: none;
  }

  // linked entries
  .linked:not(.vertical) > & {
    @extend %linked;
  }

  .linked:not(.vertical) > &:focus + &,
  .linked:not(.vertical) > &:focus + button,
  .linked:not(.vertical) > &:focus + combobox > box > button.combo {
    border-left-color: entry_focus_border();
  }

  .linked:not(.vertical) > &:drop(active) + &,
  .linked:not(.vertical) > &:drop(active) + button,
  .linked:not(.vertical) > &:drop(active) + combobox > box > button.combo {
    border-left-color: $info_color;
  }

  // Vertically linked entries
  // FIXME: take care of "colored" entries
  .linked.vertical > & {
    @extend %linked_vertical;

    // brighter border between linked entries
    &:not(:disabled) + entry:not(:disabled),
    &:not(:disabled) + %entry:not(:disabled) {
      border-top-color: mix($border_color, $base_color, 30%);
    }

    // brighter border between linked insensitive entries
    &:disabled + %entry:disabled,
    &:disabled + entry:disabled {
      border-top-color: mix($border_color, $base_color, 30%);
    }

    // color back the top border of a linked focused entry following another entry.
    // :not(:only-child) is a specificity bump hack.
    + %entry:focus:not(:only-child),
    + entry:focus:not(:only-child) {
      border-top-color: entry_focus_border();
    }

    + %entry:drop(active):not(:only-child),
    + entry:drop(active):not(:only-child) {
      border-top-color: $info_color;
    }

    // this takes care of coloring the top border of the focused entry subsequent widget.
    // :not(:only-child) is a specificity bump hack.
    &:focus:not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo {
        border-top-color: entry_focus_border();
      }
    }

    &:drop(active):not(:only-child) {
      + %entry,
      + entry,
      + button,
      + combobox > box > button.combo {
        border-top-color: $info_color;
      }
    }
  }
}

treeview entry {
  &:focus {
    &:dir(rtl), &:dir(ltr) {
      // specificity bump hack
      background-color: $base_color;
      transition-property: color, background;
    }
  }

  &.flat, & {
    border-radius: 0;
    background-image: none;
    background-color: $base_color;

    &:focus {
      // border-color: $primary_color;

    }
  }
}

.entry-tag {
  // sizing
  padding: 5px;
  margin-top: 2px;
  margin-bottom: 2px;

  // side margins: compensate the entry padding with a negative margin
  // then the negative margin itself
  :dir(ltr) & {
    margin-left: 8px;
    margin-right: -5px;
  }

  :dir(rtl) & {
    margin-left: -5px;
    margin-right: 8px;
  }

  border-style: none;

  $_entry_tag_color: if($variant == "light", $highlighted_fg_color, $base_color);

  color: $_entry_tag_color;

  $_entry_tag_bg: if($variant == "light", $primary_color, mix($fg_color, $base_color, 50%));

  background-color: $_entry_tag_bg;

  &:hover {
    background-color: lighten($_entry_tag_bg, 10%);
  }

  &.button {
    background-color: transparent;
    color: transparentize($_entry_tag_color, 0.3);
  }

  &.button {
    &:hover {
      border: 1px solid $_entry_tag_bg;
      color: $_entry_tag_color;
    }

    &:active {
      background-color: $_entry_tag_bg;
      color: transparentize($_entry_tag_color, 0.3);
    }
  }
}

/***********
 * Buttons *
 ***********/
// stuff for .needs-attention
$_dot_color: if($variant == "light", $primary_color, lighten($primary_color, 15%));

@keyframes needs_attention {
  from {
    background-image: radial-gradient(farthest-side, $_dot_color 0%, transparentize($_dot_color, 1) 0%);
  }

  to {
    background-image: radial-gradient(farthest-side, $_dot_color 95%, transparentize($_dot_color, 1));
  }
}

%button,
button {
  @at-root %button_basic, & {
    min-height: $normal_size;
    min-width: $smaller_size;
    padding: $small_padding $normal_padding;
    border: 1px solid $border_color;
    box-shadow: $button_highlight $button_highlight_color;
    border-radius: $standard_radius;
    transition: $standard_transition;

    @include button(normal);

    &:hover {
      @include button(hover);
    }

    &:active {
      @include button(active);
    }

    &:checked {
      @include button(checked);

      &:hover, &:active {
        background-color: _pressed_shade($primary_color);
      }
    }

    &:disabled {
      @include button(disabled);
    }

    // Now that the default styling for buttons has been declared,
    // we go through the major button subtypes to apply special styling
    /// ***  ***  *** ///

    /// * Text Buttons * ///

    &.text-button {
      label {
        padding: 0 $small_padding;
      }
    }

    /// * Image Buttons * ///

    &.image-button, &.toggle {
      // Give 1:1 dimensions
      min-width: $normal_size;
      padding-left: $small_padding;
      padding-right: $small_padding;

      &:not(.text-button):not(.flat) {
        // TODO: double check this
        &:hover {
          @include button(hover, $primary_color);
        }

        &:active {
          @include button(active, $primary_color);
        }

        &:checked {
          @include button(checked, $primary_color);
        }
      }
    }

    /// * Flat Buttons * ///

    &.flat, &.flat.image-button, &.flat.image-button.toggle, &.flat.toggle, &.flat.popup.toggle, &.sidebar-button {
      @include button(flat);

      &:hover {
        @include button(flat-hover, $primary_color);
      }

      &:active {
        @include button(flat-active, $primary_color);
      }

      &:checked {
        @include button(flat-checked, $primary_color);

        &:disabled {
          @include button(flat-disabled);
        }
      }
    }

    &.link {
      &.flat {
        @include button(flat, $link_color);
      }

      &:hover {
        @include button(flat-hover, $link_color);
      }

      &:active {
        @include button(flat-active, $link_color);
      }

      &.flat:disabled {
        @include button(flat);

        color: transparentize($link_color, 0.2);
      }

      &:disabled {
        @include button(disabled);
      }
    }

    &:drop(active) {
      color: $info_color;
      border-color: $info_color;
      box-shadow: inset 0 0 0 1px $info_color;
    }
  }

  @at-root %button_selected, & {
    row:selected & {
      @if $variant == "light" {
        border-color: $fg_color;
      }

      &.flat:not(:active):not(:checked):not(:hover):not(disabled) {
        color: $highlighted_fg_color;
        border-color: transparent;
      }
    }
  }

  // big standalone buttons like in Documents pager
  &.osd {
    min-width: $normal_size;
    min-height: $medium_size;

    &.image-button {
      min-width: $medium_size;
    }

    color: $fg_color;
    border-radius: $standard_radius;

    @include button(normal);

    border: none;
    box-shadow: none;

    &:hover {
      @include button(hover);

      border: none;
      box-shadow: none;
    }

    &:active,
    &:checked {
      @include button(active);

      border: none;
      box-shadow: none;
    }

    &:disabled {
      @include button(disabled);

      border: none;
    }
  }

  //overlay / OSD style
  @at-root %osd_button,
  .osd & {
    @include button(normal);

    &:hover {
      @include button(hover, $primary_color, white);
    }

    &:active {
      @include button(active, $primary_color, white);
    }

    &:checked {
      @include button(checked, $primary_color, white);
    }

    &:disabled {
      @include button(disabled);
    }

    &.flat, &.flat.image-button.scale, &.toggle:not(.text-button) {
      @include button(flat);

      &:hover {
        @include button(flat-hover);
      }

      &:disabled {
        @include button(disabled);
      }

      &:active,
      &:checked {
        @include button(flat-active);
      }
    }
  }

  // Suggested and Destructive Action buttons

  @each $b_type, $b_color in (suggested-action, $suggested_color), (destructive-action, $destructive_color), (default, $default_action_color) {
    &.#{$b_type} {
      @include button(normal, $b_color, white);

      &.flat {
        @include button(flat, $b_color, white);
      }

      &:hover {
        @include button(hover, $b_color, white);
      }

      &:active {
        @include button(active, $b_color, white);
      }

      &:checked {
        @include button(checked, $b_color, white);
      }

      &.flat:disabled {
        @include button(flat, $b_color);
      }

      &:disabled {
        @include button(disabled);

        &:active,
        &:checked {
          @include button(disabled-active, $b_color);
        }
      }

      .osd & {
        @include button(normal, $b_color);

        &:hover {
          @include button(hover, $b_color);
        }

        &:active,
        &:checked {
          @include button(active, $b_color);
        }

        &:disabled {
          @include button(disabled);
        }
      }
    }
  }

  .stack-switcher > & {
    // to position the needs attention dot, padding is added to the button
    // child, a label needs just lateral padding while an icon needs vertical
    // padding added too.

    outline-offset: -3px;

    // needs to be set or it gets overriden by GtkRadioButton outline-offset

    > label {
      padding-left: $container_padding;

      // label padding
      padding-right: $container_padding;

      //

    }

    > image {
      padding: ($container_padding / 2) $container_padding;
    }

    &.text-button {
      // compensate text-button paddings
      padding-left: $container_padding + 4;
      padding-right: $container_padding + 4;
    }

    &.image-button {
      // we want image buttons to have a 1:1 aspect ratio, so compensation
      // of the padding added to the GtkImage is needed
      padding-left: 2px;
      padding-right: 2px;
    }

    &.needs-attention {
      > label,
      > image {
        @extend %needs_attention;
      }

      &:active,
      &:checked {
        > label,
        > image {
          animation: none;
          background-image: none;
        }
      }
    }
  }

  // hide separators
  &.font,
  &.file {
    separator {
      background-color: transparent;
    }
  }

  &.font {
    > box > box > label {
      font-weight: bold;
    }
  }

  // inline-toolbar buttons
  .inline-toolbar {
    border-radius: 2px;
    border-width: 1px;

    @extend %linked;
  }

  .primary-toolbar & {
    -gtk-icon-shadow: none;
  }

  // tango icons don't need shadows

  .linked > &,
  .linked > &:hover,
  .linked > &:active,
  .linked > &:checked {
    @extend %linked;
  }

  .linked.vertical > &,
  .linked.vertical > &:hover,
  .linked.vertical > &:active,
  .linked.vertical > &:checked {
    @extend %linked_vertical;

    &:not(:last-child) {
      box-shadow: none;
    }
  }

  &.circular {
    &, &.image-button {
      // The Bloody Circul Button
      background-color: transparent;
      border-radius: 9999px;
      -gtk-outline-radius: 9999px;

      @include button(flat);

      &:hover {
        @include button(flat);

        image, label, arrow {
          color: $primary_color;
        }
      }

      &:active {
        @include button(flat);

        image, label, arrow {
          color: _pressed_shade($primary_color);
        }
      }

      label {
        padding: 0;
      }
    }
  }
}

stackswitcher.stack-switcher {
  button {
    &:hover {
      @include button(hover, $primary_color);
    }

    &:active {
      @include button(active, $primary_color);
    }

    &:checked {
      @include button(checked, $primary_color);
    }
  }
}

.vertical.linked .horizontal.linked button:only-child {
  box-shadow: none;
}

%needs_attention {
  // the dot is drawn by using two radial gradient, the first one is the actuall dot, the other
  // simulates the shadow labels and icons normally have in buttons.
  animation: needs_attention 150ms ease-in;

  $_dot_shadow: $primary_color;

  // shadow color

  background-image: radial-gradient(farthest-side, $_dot_color 96%, transparentize($_dot_color, 1)), radial-gradient(farthest-side, $_dot_shadow 95%, transparentize($_dot_shadow, 1));
  background-size: 6px 6px, 6px 6px;
  background-repeat: no-repeat;
  background-position: right 3px, right 4px;

  &:dir(rtl) {
    background-position: left 3px, left 4px;
  }
}

toolbar:not(.primary-toolbar) {
  &.horizontal, &.vertical {
    &, &.inline-toolbar {
      toolbutton button {
        &, &.flat {
          @include button(normal);

          &:hover {
            @include button(hover, $primary_color);
          }

          &:active {
            @include button(active, $primary_color);
          }

          &:checked {
            @include button(checked, $primary_color);
          }

          &:disabled {
            @include button(disabled, $primary_color);
          }
        }
      }
    }
  }
}

// More inline toolbar buttons
toolbar.inline-toolbar toolbutton {
  padding: 4px;

  > button.flat {
    @extend %linked_middle;
  }

  &:first-child > button.flat {
    @extend %linked:first-child;
  }

  &:last-child > button.flat {
    @extend %linked:last-child;
  }

  &:only-child > button.flat {
    @extend %linked:only-child;
  }
}

%linked_middle {
  border-radius: 0;
  border-right-style: none;
}

%linked {
  @extend %linked_middle;

  &:first-child {
    border-top-left-radius: $standard_radius;
    border-bottom-left-radius: $standard_radius;
  }

  &:last-child {
    border-top-right-radius: $standard_radius;
    border-bottom-right-radius: $standard_radius;
    border-right-style: solid;
  }

  &:only-child {
    border-radius: $standard_radius;
    border-style: solid;
  }

  &:hover {
    border-color: $border_color;
  }
}

%linked_vertical_middle {
  border-style: solid solid none solid;
  border-radius: 0;
}

%linked_vertical {
  @extend %linked_vertical_middle;

  &:first-child {
    border-top-left-radius: $standard_radius;
    border-top-right-radius: $standard_radius;
  }

  &:last-child {
    border-bottom-left-radius: $standard_radius;
    border-bottom-right-radius: $standard_radius;
    border-style: solid;
  }

  &:only-child {
    border-radius: $standard_radius;
    border-style: solid;
  }
}

%flat_button {
  background-color: transparent;
  background-image: none;
  border-color: transparent;
}

/* menu buttons */
modelbutton.flat,
.menuitem.button.flat {
  min-height: $normal_size;
  padding-left: $small_padding;
  padding-right: $small_padding;
  border-radius: $standard_radius;
  outline-offset: -2px;

  @extend %flat_button;

  @include button(flat);

  &:hover {
    @include button(flat-hover);

    * {
      color: $fg_color;
    }
  }

  &:active, &:checked {
    @include button(flat-active);

    * {
      color: $fg_color;
    }
  }

  &:selected {
    @extend %selected_items;
  }
}

modelbutton.flat arrow {
  background: none;

  &:hover {
    background: none;
  }

  &.left {
    -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
  }

  &.right {
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
  }
}

button.color {
  padding: 4px;

  colorswatch:only-child {
    &, overlay {
      border-radius: 0;
    }

    .osd & {
      box-shadow: none;
    }

    &:disabled {
      background-color: transparent;
      border-color: transparent;
    }
  }

  @if $variant == "light" {
    .osd &, & {
      &:disabled,
      &:active,
      &:checked {
        colorswatch:only-child {
          box-shadow: none;
        }
      }
    }
  }
}

/*********
 * Links *
 *********/

%link,
*:link {
  &, label {
    // the link and the label needs to be colored
    color: $link_color;
  }

  &:hover {
    &, label {
      color: _hover_shade($link_color, 1.5);
    }
  }

  &:active {
    &, label {
      color: _pressed_shade($link_color);
    }
  }

  &:visited {
    &, label {
      color: transparentize($link_color, $disabled_opacity);
    }

    *:selected & {
      &, label {
        color: mix($highlighted_fg_color, $link_color, 90%);
      }
    }
  }

  &:hover {
    *:selected & {
      &, label {
        color: mix($highlighted_fg_color, $link_color, 90%);
      }
    }
  }

  &:active {
    label {
      color: _pressed_shade($link_color);
    }

    *:selected & {
      &, label {
        color: mix($highlighted_fg_color, $link_color, 80%);
      }
    }
  }

  @at-root %link_selected,
  &:selected,
  *:selected & {
    &, label {
      color: mix($highlighted_fg_color, $link_color, 80%);
    }
  }
}

button:link,
button:visited {
  @extend %flat_button;

  @extend *:link;

  &:hover,
  &:active,
  &:checked {
    @extend %flat_button;
  }

  > label {
    @extend %link;

    text-decoration-line: underline;
  }
}

/*****************
 * GtkSpinButton *
 *****************/
spinbutton {
  &:not(.vertical) {
    // in this horizontal configuration, the whole spinbutton
    // behaves as the entry, so we extend the entry styling
    // and nuke the style on the internal entry
    @extend %entry;

    padding: 0;

    entry {
      min-width: $normal_size - 2;
      margin: 0;
      background: none;
      background-color: transparent;
      border: none;
      border-radius: 0;
      box-shadow: none;
    }

    button {
      margin: 0;
      padding-bottom: 0;
      padding-top: 0;
      border-style: none none none solid;
      border-radius: 0;
      background-color: transparent;
      box-shadow: none;

      &:hover {
        @include button(hover, $primary_color);
      }

      &:active {
        @include button(active, $primary_color);
      }

      &:disabled {
        @include button(disabled);

        background-color: transparent;
      }

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:dir(ltr):last-child {
        border-radius: 0 $standard_radius $standard_radius 0;
      }

      &:dir(rtl):first-child {
        border-radius: $standard_radius 0 0 $standard_radius;
      }
    }
  }

  // OSD horizontal
  .osd &:not(.vertical) {
    button {
      color: $fg_color;
      border-style: none none none solid;
      border-color: transparentize($border_color, 0.3);
      border-radius: 0;
      box-shadow: none;

      &:dir(rtl) {
        border-style: none solid none none;
      }

      &:hover {
        background-color: transparentize($fg_color, 0.9);
      }

      &:disabled {
        color: $disabled_fg_color;
        border-color: transparentize(opacify($border_color, 1), 0.5);
      }

      &:dir(ltr):last-child {
        border-radius: 0 $standard_radius $standard_radius 0;
      }

      &:dir(rtl):first-child {
        border-radius: $standard_radius 0 0 $standard_radius;
      }
    }
  }

  &.vertical {
    &:disabled {
      color: $disabled_fg_color;
    }

    &:drop(active) {
      border-color: transparent;
      box-shadow: none;
    }

    entry {
      min-height: $medium_size;
      min-width: $medium_size;
      padding: 0;
      border-radius: 0;
    }

    button {
      // same dimensions as image-button
      min-height: $normal_size;
      min-width: $normal_size;
      padding-left: $small_padding;
      padding-right: $small_padding;

      &.up {
        @extend %top_button;
      }

      &.down {
        @extend %bottom_button;
      }

      &.up, &.down {
        &:disabled {
          background-color: $solid_disabled_bg_color;
        }
      }
    }

    %top_button {
      border-radius: $standard_radius $standard_radius 0 0;
      box-shadow: none;
      border-style: solid solid none solid;

      &:hover {
        @include button(hover, $primary_color);
      }

      &:active {
        @include button(active, $primary_color);
      }
    }

    %bottom_button {
      border-radius: 0 0 $standard_radius $standard_radius;
      border-style: none solid solid solid;

      &:hover {
        @include button(hover, $primary_color);
      }

      &:active {
        @include button(active, $primary_color);
      }
    }
  }

  // OSD vertical
  .osd &.vertical button:first-child {
    @include button(normal);

    &:hover {
      @include button(hover);
    }

    &:active {
      @include button(active);
    }

    &:disabled {
      @include button(disabled);
    }
  }

  // Misc
  treeview &:not(.vertical) {
    min-height: 0;
    border-style: none;
    border-radius: 0;

    entry {
      min-height: 0;
      padding: 1px 2px;
    }
  }
}

/**************
 * ComboBoxes *
 **************/
combobox {
  arrow {
    -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    min-height: $small_size - 4;
    min-width: $small_size - 4;
  }

  button:disabled {
    @include button(disabled);

    color: $disabled_fg_color;
    background-color: $disabled_bg_color;
  }

  &.linked {
    button:nth-child(2) {
      &:dir(ltr) {
        @extend %linked:last-child;
      }

      &:dir(rtl) {
        @extend %linked:first-child;
      }
    }
  }

  &:drop(active) {
    // FIXME: untested
    box-shadow: none;

    button.combo {
      @extend %button_basic:drop(active);
    }
  }
}

.linked > combobox > box > button.combo {
  &:dir(ltr),
  &:dir(rtl) {
    @extend %linked_middle;
  }
}

.linked:not(.vertical) > combobox:first-child > box > button.combo {
  @extend %linked:first-child;
}

.linked:not(.vertical) > combobox:last-child > box > button.combo {
  @extend %linked:last-child;
}

.linked:not(.vertical) > combobox:only-child > box > button.combo {
  @extend %linked:only-child;
}

.linked.vertical > combobox > box > button.combo {
  @extend %linked_vertical_middle;
}

.linked.vertical > combobox:first-child > box > button.combo {
  @extend %linked_vertical:first-child;
}

.linked.vertical > combobox:last-child > box > button.combo {
  @extend %linked_vertical:last-child;
}

.linked.vertical > combobox:only-child > box > button.combo {
  @extend %linked_vertical:only-child;
}

/************
 * Toolbars *
 ************/
%toolbar {
  -GtkWidget-window-dragging: true;
  padding: $container_padding - 2;
  background-color: $bg_color;
}

toolbar, toolbar.horizontal, toolbar.vertical {
  @extend %toolbar;

  &:not(.inline-toolbar) {
    toolbutton, toolitem, & {
      > button, button {
        &, &.flat {
          padding: $small_padding;
          transition-duration: 150ms;

          &.flat {
            @include button(flat);

            margin: 1px;
          }

          &:hover {
            @include button(hover);

            color: _hover_shade($primary_color);
          }

          &:active, &:checked, &:checked:hover {
            @include button(active);

            color: _pressed_shade($primary_color);
          }

          &:hover, &:active, &:checked, &:checked:hover {
            box-shadow: none;
          }

          &:disabled {
            -gtk-icon-effect: dim;
          }
        }
      }
    }
  }

  &.primary-toolbar {
    toolbutton button {
      margin: 0 2px;
    }
  }

  //
  on OSD
  .osd & {
    background-color: transparent;
  }

  // stand-alone OSD toolbars
  &.osd {
    padding: $container_padding * 2;
    border: none;
    border-radius: $standard_radius;
    background-color: $bg_color;

    &.left,
    &.right,
    &.top,
    &.bottom {
      border-radius: 0;
    }

    // positional classes for `attached` osd toolbars

  }

  // toolbar separators
  &.horizontal separator {
    margin: 0 7px 1px 6px;
  }

  &.vertical separator {
    margin: 6px 1px 7px 0;
  }

  &:not(.inline-toolbar):not(.osd) {
    switch,
    scale,
    entry,
    spinbutton,
    button {
      //margin-right: 1px;
      //margin-bottom: 1px;

    }
  }
}

//searchbar, location-bar & inline-toolbar
.inline-toolbar {
  @extend %toolbar;

  @extend %darkbar;

  padding: $container_padding / 2;
  border-width: 0 1px 1px;
  border-radius: 0  0 5px 5px;
}

searchbar,
.location-bar {
  @extend %toolbar;

  @extend %darkbar;

  border-width: 0 0 1px;
  padding: $container_padding / 2;
}

%darkbar {
  border-style: solid;
  border-color: $border_color;

  $_bg: mix($bg_color, $border_color, 70%);

  background-color: $_bg;
}

/***************
 * Header bars *
 ***************/

%titlebar,
headerbar {
  // rounding is done under window decoration section
  background-color: $headerbar_bg_color;
  color: $headerbar_fg_color;
  box-shadow: if($variant == "light", $headerbar_shadow, none);

  // TODO:
  min-height: if($compact == true, 40px, 45px);
  padding: 0 $container_padding;

  &:disabled:not(button) > label {
    color: $disabled_fg_color;
  }

  .title {
    $_title_color: if($variant == "dark" or $headerbar == "dark", white, $headerbar_fg_color);

    transition: $shorter_transition;
    padding: 0 ($container_padding * 2);
    color: $_title_color;
    font-weight: 400;

    &:backdrop {
      color: transparentize($_title_color, 0.5);
    }
  }

  .subtitle {
    transition: $shorter_transition;
    padding: 0 ($container_padding * 2);
    font-size: smaller;

    @extend .dim-label;
  }

  &.selection-mode {
    // hilight color
    //box-shadow: $headerbar_shadow, inset 0 1px $alt_highlight_color;
    color: $highlighted_fg_color;
    border-color: $highlight_color;

    .subtitle:link {
      @extend *:link:selected;
    }

    .selection-menu {
      & {
        border-color: transparentize($primary_color, 1);
        background-color: transparentize($primary_color, 1);
        background-image: none;

        //box-shadow: $shadow_1, inset 0 1px $alt_highlight_color;
        padding-left: $container_padding + 4;
        padding-right: $container_padding + 4;

        GtkArrow {
          -GtkArrow-arrow-scaling: 1;
        }

        .arrow {
          -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
          color: transparentize($highlighted_fg_color, 0.5);
          -gtk-icon-shadow: none;
        }
      }
    }
  }

  .titlebar {
    separator {
      background-color: if($headerbar == "dark", $dark_border_color, $border_color);
    }
  }

  // squared corners when the window is maximized or tiled

  &.default-decoration {
    min-height: 20px;
    padding: $container_padding;
    box-shadow: none;

    .fullscreen &,
    .maximized &,
    .tiled & {
      box-shadow: none;
      transition-duration: 250ms;
    }
  }

  .solid-csd & {
    &:dir(ltr),
    &:dir(rtl) {
      // specificity bump
      // margin-left: -2px;
      // margin-right: -2px;
      // margin-top: -2px;
      // border-radius: 0;
      // box-shadow: inset 0 1px $titlebar_highlight_color;

    }
  }
}

headerbar {
  // add vertical margins to common widget on the headerbar to avoid them spanning the whole height
  entry, spinbutton,
  button {
    margin-top: $container_padding;
    margin-bottom: $container_padding;
  }

  switch {
    margin-top: $container_padding + 4;
    margin-bottom: $container_padding + 4;

    @include switch($in_headerbar: true);
  }

  // reset button margins of the spinbutton
  spinbutton button {
    margin-top: 0;
    margin-bottom: 0;
  }

  // separator {
  //   &, &.titlebutton {
  //     background-color: $headerbar_bg_color;
  //     background-image: image($headerbar_bg_color);
  //   }
  // }
  separator {
    &, &.titlebutton {
      margin: ($container_padding * 2) 0;
      background-image: image(if($headerbar == "dark" and $variant == "light", $dark_border_color, $border_color));
    }
  }
}

.titlebar:not(headerbar):not(.path-bar) {
  border-top: 1px solid $headerbar_bg_color;

  window.csd > & {
    // in csd we assume every titlebar is a headerbar so reset anything, this is needed for split toolbars cases
    padding: 0;
    background-color: transparent;
    background-image: none;
    border-style: none;
  }

  separator {
    background-color: $headerbar_bg_color;
    background-image: image($headerbar_bg_color);
  }

  @extend %titlebar;
}

/************
 * Pathbars *
 ************/
headerbar.titlebar .path-bar button, .path-bar button {
  border-width: 0px;
  padding-left: $small_padding;
  padding-right: $small_padding;

  &.text-button.toggle {
    @include button(toggle, $lighter_bg_color, $primary_color, $in_headerbar: true);

    &:hover {
      @include button(toggle-hover, $lighter_bg_color, $primary_color, $in_headerbar: true);
    }

    &:active, &:checked {
      @include button(toggle-active, $lighter_bg_color, $primary_color, $in_headerbar: true);

      &:hover {
        background-color: if($headerbar == "dark", $dark_lighter_bg_color, $lighter_bg_color);
      }

      &:disabled {
        @include button(disabled, $in_headerbar: true);
      }
    }

    &:disabled {
      @include button(disabled, $in_headerbar: true);
    }
  }

  &.text-button.image-button label {
    padding-left: 0;
    padding-right: 0;
  }

  &.text-button.image-button, & {
    label:last-child {
      padding-right: $normal_padding;
    }

    label:first-child {
      padding-left: $normal_padding;
    }
  }

  image {
    padding-left: $small_padding;
    padding-right: $small_padding;
  }

  &.slider-button {
    border-width: 0px;
    box-shadow: none;
    padding-left: 0;
    padding-right: 0;

    &:first-child {
      border-top-right-radius: 0px;
      border-bottom-right-radius: 0px;
    }

    &:last-child {
      border-left-style: none;
    }
  }

  @include button(flat, $in_headerbar: true);

  &:first-child {
    border-radius: $standard_radius 0 0 0;
  }

  &:last-child {
    border-radius: 0 $standard_radius 0 0;
  }

  &:disabled {
    @include button(disabled);
  }

  &, &:disabled {
    // to give the appearance of the pathbar being one large box, even if the sliders are disabled
    background-color: if($headerbar == "dark" and $variant == "light", $dark_lighter_bg_color, $lighter_bg_color);
  }
}

#pathbarbox {
  background: $alt_bg_color;

  button {
    background-color: $lighter_bg_color;
    border-width: 0px;
    padding-left: $small_padding;
    padding-right: $small_padding;

    @include button(toggle, $lighter_bg_color, $primary_color);

    &:hover {
      @include button(toggle-hover, $lighter_bg_color, $primary_color);
    }

    &:active, &:checked {
      @include button(toggle-active, $lighter_bg_color, $primary_color);

      &:disabled {
        @include button(disabled);

        box-shadow: $shadow_bottom $disabled_fg_color;
      }
    }

    &:disabled {
      @include button(disabled);
    }

    &.slider-button {
      border-width: 0px;

      @include button(flat);

      &:hover {
        @include button(flat-hover);
      }

      &:active {
        @include button(flat-active);
      }

      &:disabled {
        @include button(disabled);
      }

      &, &:disabled {
        // to give the appearance of the pathbar being one large box, even if the sliders are disabled
        background-color: $lighter_bg_color;
      }
    }
  }
}

/**************
 * Tree Views *
 **************/
treeview.view {
  background-color: $base_color;
  box-shadow: inset 0 -1px transparentize($border_color, if($variant == "light", 0.1, 0.05));
  border-color: transparentize($border_color, if($variant == "light", 0.1, 0.05));

  @at-root * {
    -GtkTreeView-horizontal-separator: 4;
    -GtkTreeView-grid-line-width: 1;
    -GtkTreeView-grid-line-pattern: '';
    -GtkTreeView-tree-line-width: 1;
    -GtkTreeView-tree-line-pattern: '';
    -GtkTreeView-expander-size: 16;
  }

  rubberband {
    @extend rubberband;
  }

  // to avoid borders being overridden by the previously set props

  &:selected {
    color: $highlighted_fg_color;
    background-color: $primary_color;

    &:focus, & {
      border-radius: 0;

      @extend %selected_items;
    }

    & {
      border-left-color: mix($highlighted_fg_color, $primary_color, 50%);
      border-top-color: transparentize($fg_color, 0.9);

      // doesn't work unfortunatelly

    }
  }

  &:disabled {
    color: $disabled_fg_color;

    &:selected {
      background-color: $primary_color;

      label {
        color: mix($highlighted_fg_color, $primary_color, 40%);
      }

      & {
        label {
          color: mix($disabled_fg_color, $primary_color, 30%);
        }
      }
    }
  }

  &.separator {
    min-height: 2px;
    color: $bg_color;
  }

  &:drop(active) {
    border-style: solid none;
    border-width: 1px;
    border-color: $highlight_color;

    &.after {
      border-top-style: none;
    }

    &.before {
      border-bottom-style: none;
    }
  }

  &.expander {
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    color: mix($fg_color, $base_color, 70%);

    &:hover {
      color: $fg_color;
    }

    &:selected {
      color: mix($highlighted_fg_color, $primary_color, 70%);

      &:hover {
        color: $highlighted_fg_color;
      }
    }

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }

  &.progressbar {
    // progress bar in treeviews
    border-bottom: $bar_size solid $progress_color;
    border-radius: 0;
    box-shadow: none;
    background-color: transparent;

    &:selected {
      border-bottom-color: currentColor;
    }
  }

  &.trough {
    // progress bar trough in treeviews
    border-bottom: $bar_size solid scale-alpha($progress_color, $lower_opacity);
    box-shadow: none;
    background-color: transparent;

    &:selected {
      border-bottom-color: scale-alpha($progress_color, $middle_opacity);
    }
  }

  header {
    button {
      @extend row.activatable;

      font-weight: bold;
      color: $secondary_fg_color;

      & {
        // rhythmbox playing indicator's icon gets pushed out of frame so we give minimal padding
        padding: 1px;
      }

      background-image: image($base_color);
      box-shadow: none;
      border: none;
      box-shadow: _shadow_border(0, 1, 1, 0);
      border-radius: 0;
      background-clip: border-box;

      &:last-child {
        box-shadow: _shadow_border(0, 0, 1, 0);
      }

      label {
        & {
          // since rhythmbox's playing indicator gets pushed out of frame we're putting the "real" padding here
          // minus the safeguard value from above
          padding: 1px 5px;
        }

        transition: $standard_transition;
        transition-duration: 150ms;
      }

      &:hover {
        label, image, arrow {
          color: _hover_shade($primary_color);
        }
      }

      &:active {
        label, image, arrow {
          color: _pressed_shade($primary_color);
        }
      }

      &,
      &:disabled {
        background-color: $base_color;
      }

      &:last-child {
        border-right-style: none;
      }
    }

    button {
      background-color: $lighter_bg_color;
    }
  }

  button.dnd,
  header.button.dnd {
    // for treeview-like derive widgets
    padding: ($container_padding - 4) $container_padding;
    border-style: none solid solid;
    border-width: 1px;
    border-color: $border_color;
    border-radius: 0;
    box-shadow: none;
    background-color: $base_color;
    background-clip: border-box;
    color: $primary_color;
  }

  acceleditor > label {
    background-color: $primary_color;
  }
}

/*********
 * Menus *
 *********/
menubar,
.menubar {
  -GtkWidget-window-dragging: true;
  padding: 0px;

  @if $headerbar == "dark" or $variant == "dark" {
    background-color: $dark_headerbar_bg;
    box-shadow: inset 0 -1px $dark_border_color;
    color: $light_fg_color;
  }
  @else {
    background-color: $headerbar_bg_color;
    box-shadow: inset 0 -1px $border_color;
  }

  > menuitem {
    transition: $standard_transition;
    min-height: $small_size - 4;
    padding: $small_padding $normal_padding;

    check, radio {
      min-width: $small_size - 4;
      min-height: $small_size - 4;
      transition: none;

      &:checked, &:indeterminate {
        transition: none;
      }
    }

    &:hover {
      //Seems like it :hover even with keyboard focus
      box-shadow: inset 0 -3px $primary_color;
      color: $primary_color;
    }

    &:disabled {
      color: $disabled_fg_color;
      box-shadow: none;
    }
  }
}

menu, menu#PagePopup,
.menu,
.context-menu {
  // what is pagepopup? epiphany...
  margin: 0 4px 0 0;
  background-color: $lighter_bg_color;
  border: 1px solid $border_color;

  .csd & {
    border: none;
  }

  // axes borders in a composited env

  menuitem {
    min-height: $normal_size;
    min-width: $normal_size;
    padding: $small_padding;

    &:hover {
      label {
        color: $highlighted_fg_color;
      }

      color: $highlighted_fg_color;
      background-color: $primary_color;
    }

    &:disabled {
      color: $disabled_fg_color;
    }

    // submenu indicators
    arrow {
      min-height: $small_size - 4;
      min-width: $small_size - 4;

      &:dir(ltr) {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
        margin-left: 10px;
      }

      &:dir(rtl) {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
        margin-right: 10px;
      }
    }

    // avoids labels color being overridden, see
    // https://bugzilla.gnome.org/show_bug.cgi?id=767058
    label {
      &:dir(rtl), &:dir(ltr) {
        color: inherit;
      }
    }
  }

  // overflow arrows
  > arrow {
    //@include button(flat);

    min-height: $small_size - 4;
    min-width: $small_size - 4;
    padding: $small_padding;
    background-color: $base_color;
    border-radius: 0;

    &.top {
      margin-top: -6px;
      border-bottom: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
    }

    &.bottom {
      margin-bottom: -6px;
      border-top: 1px solid mix($fg_color, $base_color, 10%);
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }

    &:hover {
      background-color: mix($fg_color, $base_color, 10%);
    }

    &:disabled {
      color: transparent;
      background-color: transparent;
      border-color: transparent;
    }
  }

  separator {
    margin: 0 ($container_padding - 1);
  }
}

menuitem {
  accelerator {
    color: gtkalpha(currentColor, 0.55);
  }

  check,
  radio {
    min-height: 14px;
    min-width: 14px;

    &:dir(ltr) {
      margin: 0 $small_padding;
    }

    &:dir(rtl) {
      margin: 0 $small_padding;
    }
  }
}

/***************
 * Popovers   *
 ***************/

popover.background {
  transition: $standard_transition;
  background-color: $lighter_bg_color;
  box-shadow: $shadow_1;

  .csd &, & {
    border: 1px solid $border_color;
  }

  box-shadow: 0 1px 2px transparentize(black, 0.7);

  > list,
  > .view,
  > toolbar {
    border-style: none;
    background-color: transparent;
  }

  .csd &, & {
    &.touch-selection,
    &.magnifier {
      @extend %osd;

      border: 1px solid transparentize(white, 0.9);

      button {
        @extend %osd_button;
      }
    }

    &.osd {
      @extend %osd;
    }
  }

  &, list {
    separator {
      margin: $container_padding - 1;
    }
  }

  &.menu, & {
    modelbutton {
      &, &.flat, &.flat.image-button {
        min-height: $normal_size;
        min-width: $normal_size;
        padding: $small_padding;
        border-radius: 0px;

        @include button(flat);

        &:hover {
          background-color: $semi_fill_color;
        }

        &:active {
          background-color: $fill_color;
        }

        &:checked {
          @extend %selected_items;
        }
      }
    }
  }
}

/*************
 * Notebooks *
 *************/
notebook {
  > header {
    border-width: 0;
    border-color: $border_color;
    background-color: $alt_bg_color;
    background-clip: border-box;

    &.top {
      box-shadow: inset 0 -1px $border_color;
    }

    &.bottom {
      box-shadow: inset 0 1px $border_color;
    }

    &.left {
      box-shadow: inset -1px 0px $border_color;
    }

    &.right {
      box-shadow: inset 1px 0px $border_color;
    }

    &.top, &.bottom, &.left, &.right {
      tabs tab {
        border-width: 0;

        &:checked, &:hover {
          background-color: $base_color;
          box-shadow: none;
        }
      }
    }

    &.top, &.bottom {
      tabs tab label {
        padding: $small_padding $medium_padding;
      }
    }

    &.left, &.right {
      tabs tab label {
        padding: $medium_padding $small_padding;
      }
    }

    &.top {
      > tabs {
        margin-bottom: 0px;
        margin-top: $container_padding;

        > tab {
          border-radius: $standard_radius $standard_radius 0 0;
          margin-left: $container_padding;
          border-width: 0;

          &:hover, &:checked {
            border: 0;
            box-shadow: _shadow_border(1, 1, 0, 1), _shadow_border(1, 1, 0, 1);
          }
        }
      }
    }

    &.bottom {
      > tabs {
        margin-top: 0px;
        margin-bottom: $container_padding;

        > tab {
          border-radius: 0 0 $standard_radius $standard_radius;
          margin-left: $container_padding;
          border-width: 0;

          &:hover, &:checked {
            border: 0;
            box-shadow: _shadow_border(0, 1, 1, 1), _shadow_border(0, 1, 1, 1);
          }
        }
      }
    }

    &.left {
      > tabs {
        margin-left: $container_padding;
        margin-right: 0px;

        > tab {
          border-radius: $standard_radius 0 0 $standard_radius;
          margin-bottom: $container_padding;

          //margin-right: 1px;
          border-width: 0;

          &:hover, &:checked {
            border: 0;
            box-shadow: _shadow_border(1, 0, 1, 1), _shadow_border(1, 0, 1, 1);
          }
        }
      }
    }

    &.right {
      > tabs {
        margin-right: $container_padding;
        margin-left: 0px;

        > tab {
          border-radius: 0px $standard_radius $standard_radius 0px;
          margin-bottom: $container_padding;

          //margin-left: 1px;
          border-width: 0;

          &:hover, &:checked {
            border: 0;
            box-shadow: _shadow_border(1, 1, 1, 0), _shadow_border(1, 1, 1, 0);
          }
        }
      }
    }

    &.top, &.bottom {
      tabs tab:first-child {
        margin-left: 0;
      }
    }

    &.top > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-top-style: none;
    }

    &.bottom > tabs > arrow {
      @extend %notebook_vert_arrows;

      border-bottom-style: none;
    }

    @at-root %notebook_vert_arrows {
      padding-left: $small_padding;
      padding-right: $small_padding;

      &.down {
        margin-left: -8px;
        -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
      }

      &.up {
        margin-right: -8px;
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
      }
    }

    &.left > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-left-style: none;
    }

    &.right > tabs > arrow {
      @extend %notebook_horz_arrows;

      border-right-style: none;
    }

    @at-root %notebook_horz_arrows {
      padding-top: $small_padding;
      padding-bottom: $small_padding;

      &.down {
        margin-top: -8px;
        -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
      }

      &.up {
        margin-bottom: -8px;
        -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
      }
    }

    > tabs > arrow {
      min-height: 16px;
      min-width: 16px;
      border-radius: 0;
    }

    tab {
      color: $secondary_fg_color;
      transition: $shorter_transition;
      min-height: $normal_size;
      min-width: $large_size + 4;
      padding: $small_padding $normal_padding;
      outline-offset: -3px;
      border-width: 0;
      font-weight: 500;

      &:active, &:checked {
        label {
          color: $fg_color;
        }
      }

      button {
        &, &.flat {
          min-height: 0px;
          border-width: 0px;
          padding: $small_padding ($normal_padding - 2);

          @include button(flat);

          color: $disabled_fg_color;

          &:hover {
            @include button(flat-hover);
          }

          &:active, &:checked {
            @include button(flat-active);
          }
        }
      }

      &:hover {
        &.reorderable-page {
          border-color: $border_color;
          background-color: $alt_base_color;
        }
      }

      &:disabled {
        color: $disabled_secondary_fg_color;
      }

      &:checked {
        color: $fg_color;

        label {
          font-weight: bold;
        }

        &:disabled {
          color: $disabled_fg_color;
        }

        &.reorderable-page {
          border-color: $border_color;
          background-color: $base_color;
        }
      }

      &:not(:checked) {
        button {
          color: $disabled_fg_color;
        }
      }

      // colors the button like the label, overridden otherwise
      button.flat {
        &:last-child {
          margin-left: $container_padding;
          margin-right: $container_padding - 12px;
        }

        &:first-child {
          margin-left: $container_padding - 12px;
          margin-right: $container_padding;
        }
      }
    }

    &.bottom,
    &.top {
      tabs {
        padding-left: 8px;
        padding-right: 8px;

        &:not(:only-child) {
          &:first-child {
            margin-left: 0;
          }

          &:last-child {
            margin-right: 0;
          }
        }

        tab {
          &.reorderable-page {
            margin-left: $container_padding;
            border-style: none solid;
          }
        }
      }
    }

    &.left,
    &.right {
      tabs {
        padding-top: 8px;
        padding-bottom: 8px;

        &:not(:only-child) {
          &:first-child {
            margin-top: 0;
          }

          &:last-child {
            margin-bottom: 0;
          }
        }

        tab {
          &.reorderable-page {
            margin-left: $container_padding;
            border-style: solid none;
          }
        }
      }
    }
  }

  > stack:not(:only-child) {
    // the :not(:only-child) is for "hidden" notebooks
    background-color: $base_color;
  }
}

/**************
 * Scrollbars *
 **************/
scrollbar {
  $_slider_min_length: 24px;

  // disable steppers
  @at-root * {
    -GtkScrollbar-has-backward-stepper: false;
    -GtkScrollbar-has-forward-stepper: false;
  }

  transition: $shorter_transition;
  background-color: $base_color;
  background-clip: $extra_background_clip;

  // scrollbar border
  &.top {
    border-bottom: 1px solid $border_color;
  }

  &.bottom {
    border-top: 1px solid $border_color;
  }

  &.left {
    border-right: 1px solid $border_color;
  }

  &.right {
    border-left: 1px solid $border_color;
  }

  // slider
  slider {
    transition: $shorter_transition;
    min-width: 8px;
    min-height: 8px;
    border: 4px solid transparent;
    border-radius: $circular_radius;
    background-clip: padding-box;
    background-color: $secondary_fg_color;

    &:hover {
      background-color: $secondary_fg_color;
    }

    &:active {
      background-color: $fg_color;
    }

    &:disabled {
      background-color: $disabled_secondary_fg_color;
    }
  }

  &.fine-tune {
    slider {
      transition: $shorter_transition;

      //margin 0, border-width 0, min-width 0, min-height 0;
      min-width: 4px;
      min-height: 4px;
    }

    &.horizontal slider {
      margin: 2px 0;
    }

    &.vertical slider {
      margin: 0 2px;
    }
  }

  &.overlay-indicator {
    &:not(.dragging):not(.hovering) {
      border-color: transparent;
      background-color: transparent;

      slider {
        min-width: 4px;
        min-height: 4px;
        margin: 4px - 1px;
        border: 1px solid scale-alpha($base_color, $lower_opacity);
      }

      button {
        min-width: 4px;
        min-height: 4px;
        margin: 4px - 1px;
        border: 1px solid scale-alpha($base_color, $lower_opacity);
        border-radius: $circular_radius;
        background-color: $secondary_fg_color;
        background-clip: padding-box;
        -gtk-icon-source: none;

        &:disabled {
          background-color: $disabled_secondary_fg_color;
        }
      }

      &.horizontal {
        slider {
          min-width: $_slider_min_length;
        }

        button {
          min-width: 8px;
        }
      }

      &.vertical {
        slider {
          min-height: $_slider_min_length;
        }

        button {
          min-height: 8px;
        }
      }
    }

    &.dragging,
    &.hovering {
      background-color: $border_color;
    }

    &.hovering slider {
      background-color: transparentize($primary_color, $middle_opacity);
    }

    &.dragging slider {
      background-color: transparentize($primary_color, $disabled_opacity);
    }
  }

  &.horizontal slider {
    min-width: $_slider_min_length;
  }

  &.vertical slider {
    min-height: $_slider_min_length;
  }

  // button styling
  button {
    min-width: $smaller_size;
    min-height: $smaller_size;
    padding: 0;
    border-radius: 0;
  }

  // button icons
  &.vertical {
    button {
      &.down {
        -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
      }

      &.up {
        -gtk-icon-source: -gtk-icontheme("pan-up-symbolic");
      }
    }
  }

  &.horizontal {
    button {
      &.down {
        -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");
      }

      &.up {
        -gtk-icon-source: -gtk-icontheme("pan-start-symbolic");
      }
    }
  }
}

/**********
 * Switch *
 **********/

switch {
  // smooth as heck
  @include switch;
}

/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

//selection-mode
@each $s, $as in ("", "-selectionmode"), (":hover", "-hover-selectionmode"), (":active", "-active-selectionmode"), (":backdrop", "-backdrop-selectionmode"), (":checked", "-checked-selectionmode"), (":checked:hover", "-checked-hover-selectionmode"), (":checked:active", "-checked-active-selectionmode"), (":backdrop:checked", "-checked-backdrop-selectionmode") {
  .view.content-view.check#{$s}:not(list),
  .content-view .tile check#{$s}:not(list) {
    -gtk-icon-shadow: none;
    -gtk-icon-source: -gtk-scaled(url("assets/checkbox#{$as}.png"), url("assets/checkbox#{$as}@2.png"));
    background-color: transparent;
    min-width: $normal_size + 16;
    min-height: $normal_size + 16;
    background-image: none;
    transition: none;
    box-shadow: none;
    border-width: 0;
  }
}

checkbutton.text-button, radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  outline-offset: 0;

  label:not(:only-child) {
    &:first-child {
      margin-left: 4px;
    }

    &:last-child {
      margin-right: 4px;
    }
  }
}

check,
radio {
  margin: 0 4px;
  transition: $standard_transition;
  transition-duration: 150ms;

  &:only-child {
    margin: 0;
  }

  popover & {
    // when in a popover add more space between the label and the check, reset the other side margin.
    // See https://bugzilla.gnome.org/show_bug.cgi?id=779570 for details.
    &.left:dir(rtl) {
      margin-left: 0;
      margin-right: 12px;
    }

    &.right:dir(ltr) {
      margin-left: 12px;
      margin-right: 0;
    }
  }

  min-height: 14px;
  min-width: 14px;
  border: 1px solid $border_color;

  @include button(normal);

  &:hover {
    @include button(hover);
  }

  &:active {
    @include button(active);
  }

  &:checked, &:indeterminate {
    @include button(normal, $success_color);

    &:hover, &:active {
      @include button(active, $success_color);

      background-color: _pressed_shade($success_color);
    }

    &:disabled {
      color: transparentize(white, $disabled_opacity);
      background-color: transparentize($success_color, $disabled_opacity);
      border-color: transparentize($success_color, $disabled_opacity);
      box-shadow: none;
    }
  }

  &, &:hover, &:active, &:checked, &:indeterminate {
    box-shadow: none;
  }

  &:disabled {
    @include button(disabled);
  }

  menu menuitem & {
    margin: 0;

    // this is a workaround for a menu check/radio size allocation issue

    &, &:hover, &:disabled {
      min-height: 14px;
      min-width: 14px;
      background-image: none;
      background-color: transparent;
      box-shadow: none;
      -gtk-icon-shadow: none;
      color: inherit;
      border-color: $border_color;
    }
  }
}

%check,
check {
  border-radius: $standard_radius / 2 + 1;

  &:checked {
    -gtk-icon-source: -gtk-recolor(url("assets/check-symbolic.symbolic.png"));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-recolor(url("assets/dash-symbolic.symbolic.png"));
  }
}

%radio,
radio {
  border-radius: 100%;

  &:checked {
    -gtk-icon-source: -gtk-recolor(url("assets/bullet-symbolic.symbolic.png"));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-recolor(url("assets/dash-symbolic.symbolic.png"));
  }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
radio:not(:indeterminate):not(:checked):active:not(:backdrop) {
  -gtk-icon-transform: scale(0);
}

check:not(:indeterminate):not(:checked):active:not(:backdrop) {
  -gtk-icon-transform: translate(6px, -3px) rotate(-45deg) scaleY(0.2) rotate(45deg) scaleX(0);
}

radio,
check {
  background-color: $base_color;
  border-color: $border_color;

  &:active {
    -gtk-icon-transform: scale(0, 1);
  }

  // should tackle the indeterminate state, untested

  &:checked:not(:backdrop), &:indeterminate:not(:backdrop) {
    -gtk-icon-transform: unset;
    transition: 400ms;
  }
}

menu menuitem {
  check, radio {
    &, &:checked:not(:backdrop), &:indeterminate:not(:backdrop) {
      transition: none;
    }

    &, &:checked, &:indeterminate {
      &, &:hover, &:disabled {
        // reset
        background-image: none;
        background-color: transparent;
        box-shadow: none;
        transition: none;
      }
    }

    & {
      &, &:checked, &:indeterminate {
        color: $fg_color;
        border-color: $fg_color;

        &:disabled {
          color: $disabled_fg_color;
          border-color: $disabled_fg_color;
        }
      }
    }

    &, &:checked, &:indeterminate {
      &:hover, &:selected {
        color: $highlighted_fg_color;
        border-color: $highlighted_fg_color;
      }
    }
  }
}

treeview.view {
  check {
    @extend %check;
  }

  radio {
    @extend %radio;
  }
}

check, radio {
  &:selected {
    background-color: transparent;
    border-color: $highlighted_fg_color;
    color: $highlighted_fg_color;
  }
}

treeview.view {
  check:selected {
    border-radius: $standard_radius / 2;
  }

  radio:selected {
    border-radius: 100%;
  }
}

/************
 * GtkScale *
 ************/
scale {
  border-radius: $standard_radius;

  // sizing
  $_marks_length: 14px;
  $_marks_distance: -6px;

  $slider_size: 24px;
  $marks_slider_size: 30px;

  $slider_margin: -($slider_size - $bar_size) / 2;
  $marks_slider_margin: -($marks_slider_size - $bar_size) - $slider_margin;

  $color_slider_margin: -$slider_size / 2;
  $color_marks_slider_margin: -($marks_slider_size - 16px) - $color_slider_margin;

  min-height: $medium_size - $slider_size;
  min-width: $medium_size - $slider_size;
  padding: $slider_size / 2;

  * {
    outline-style: solid;
  }

  // the slider is inside the trough, so to have make it bigger there's a negative margin

  contents {
    border-radius: $standard_radius;
    background: $button_highlight_color;
  }

  slider {
    margin: $slider_margin;
  }

  Scale
  trough {
    border-radius: $standard_radius;
    outline-style: none;
    background-color: $button_highlight_color;
  }

  &.vertical trough {
    min-width: 4px;
  }

  &.horizontal trough {
    min-height: 4px;
  }

  // the colored part of the backing bit
  highlight {
    border-radius: $standard_radius;
    background-color: $progress_color;

    &:disabled {
      background-color: $disabled_bg_color;
    }
  }

  // this is another differently styled part of the backing bit, the most relevant use case is for example
  // in media player to indicate how much video stream as been cached
  fill {
    background-color: $semi_fill_color;

    &:disabled {
      background-color: $disabled_bg_color;
    }
  }

  slider, %slider {
    margin: -8.5px;
    transition: all 75ms cubic-bezier(0.25, 0.25, 0.75, 0.75);
    background-color: $lighter_bg_color;
    box-shadow: $shadow_surround $border_color, $shadow_surround $border_color;
    border-radius: $standard_radius;
    min-width: 0px;
    min-height: 0px;

    &:active, &:hover {
      transition: all 75ms cubic-bezier(0.25, 0.25, 0.75, 0.75);
      margin: -8.5px;
      background-clip: border-box;
      background-color: _hover_shade($accent_color);
      border-color: _hover_shade($accent_color);

      &:active {
        background-color: _pressed_shade($accent_color);
        border-color: _pressed_shade($accent_color);
      }
    }

    &:disabled {
      // we're using these fixed value because the disabled colors are just transparentized
      // versions of the normal bg/fg colors -> this fact is visible on sliders as the element is spread across two
      // different backgrounds (the trough and the base)
      background-color: if($variant == "light", #bfbfbf, #2b2b2b);
      box-shadow: none;

      contents {
        background-color: darken($bg_color, 5%);
      }
    }

    // Selected list-row and infobar sliders
    menuitem:hover &,
    row:selected &,
    infobar & {
      background-clip: border-box;
      background-color: $highlighted_fg_color;
      border-color: $highlighted_fg_color;

      &:hover {
        background-color: mix($highlighted_fg_color, $primary_color, 85%);
        border-color: mix($highlighted_fg_color, $primary_color, 85%);
      }

      &:active {
        background-color: mix($highlighted_fg_color, $primary_color, 50%);
        border-color: mix($highlighted_fg_color, $primary_color, 50%);
      }

      &:disabled {
        background-color: mix($highlighted_fg_color, $primary_color, 55%);
        border-color: mix($highlighted_fg_color, $primary_color, 55%);
      }
    }

    // OSD sliders
    .osd & {
      background-clip: border-box;

      @extend %slider;

      &:hover, &:active {
        @extend %slider:hover;
      }

      &:active {
        @extend %slider:active;
      }

      &:disabled {
        @extend %slider:disabled;
      }
    }
  }

  &.fine-tune {
    slider {
      &, &:active, &:hover {
        margin: -6.5px;
      }
    }
  }

  value {
    color: gtkalpha(currentColor, 0.4);
  }

  marks {
    color: gtkalpha(currentColor, 0.4);

    @each $marks_class, $marks_pos, $marks_margin in (top, top, bottom), (bottom, bottom, top), (top, left, right), (bottom, right, left) {
      &.#{$marks_class} {
        margin-#{$marks_margin}: $_marks_distance;
        margin-#{$marks_pos}: -($_marks_distance + $_marks_length);
      }
    }
  }

  mark {
    margin: -2px;
  }

  &.horizontal {
    indicator {
      min-height: $_marks_length;
      min-width: 1px;
      margin: 0 1px 0 0;
    }

    &.fine-tune indicator {
      min-height: $_marks_length - 1px;
    }
  }

  &.vertical {
    indicator {
      min-height: 1px;
      min-width: $_marks_length;
      margin: 1px 0 0 0;
    }

    &.fine-tune indicator {
      min-width: $_marks_length - 1px;
    }
  }

  &.horizontal, &.vertical {
    &.marks-after, &.marks-before {
      trough {
        outline-style: none;
        border-right: 1px solid $button_highlight_color;

        slider {
          &, &:active, &:active:hover {
            margin: -8.5px;
          }
        }
      }
    }

    &.fine-tune {
      &.horizontal, &.vertical {
        &.marks-after, &.marks-before {
          trough {
            slider {
              &, &:hover, &:active {
                margin: -8.5px;
              }
            }
          }
        }
      }
    }

    &.horizontal {
      &.marks-after, &.marks-before {
        trough {
          min-height: 1px;
        }

        &.vertical {
          &.marks-after, &.marks-before {
            trough {
              min-width: 1px;
            }
          }
        }
      }
    }
  }
}

/*****************
 * Progress bars *
 *****************/
progressbar {
  border-radius: $standard_radius;

  &.horizontal {
    progress, trough {
      border-radius: $standard_radius;
      min-height: $bar_size;
    }
  }

  &.vertical {
    progress, trough {
      border-radius: $standard_radius;
      min-width: $bar_size;
    }
  }

  font-size: smaller;
  color: $secondary_fg_color;

  &.osd {
    // progressbar.osd used for epiphany page loading progress
    // min-width: $bar_size;
    // min-height: $bar_size;
    // background-color: transparent;
    box-shadow: none;

    trough {
      background-color: scale-alpha($progress_color, $lower_opacity);
    }

    progress {
      background-color: $progress_color;
    }
  }

  // Moving bit
  progress {
    background-color: $progress_color;

    //border: none;
    //border-radius: 3px;
    //box-shadow: none;

    //needed for clipping

    row:selected &,
    infobar & {
      background-color: $highlighted_fg_color;
    }
  }

  // Trough
  trough {
    background-color: scale-alpha($accent_color, $lower_opacity);
  }
}

/*************
 * Level Bar *
 *************/
levelbar {
  block {
    border-radius: $standard_radius;
    min-width: $medium_size;
    min-height: $bar_size;
  }

  &.vertical block {
    min-width: $bar_size;
    min-height: $medium_size;
  }

  trough {
    padding: 2px;
    border-radius: 0;
  }

  &.horizontal.discrete {
    block {
      margin: 0 1px;
    }

    trough {
      padding: 2px 1px;
    }
  }

  &.vertical.discrete {
    block {
      margin: 1px 0;
    }

    trough {
      padding: 1px 2px;
    }
  }

  block {
    &.low {
      background-color: $warning_color;
    }

    &.high,
    &:not(.empty) {
      background-color: $progress_color;
    }

    &.full {
      background-color: $success_color;
    }

    &.empty {
      background-color: $button_highlight_color;
      color: $button_highlight_color;
    }
  }
}

/****************
 * Print dialog *
*****************/
printdialog {
  paper {
    color: $fg_color;
    border: 1px solid $border_color;
    background: $base_color;
    padding: 0;
  }

  .dialog-action-box {
    margin: 12px;
  }
}

/**********
 * Frames *
 **********/
.frame,
frame > border {
  margin: 0;
  padding: 0;
  border: 1px solid $border_color;
  border-radius: 0;
  box-shadow: none;

  &.flat {
    border-style: none;
  }
}

actionbar > revealer > box {
  padding: 6px;
  border-top: 1px solid $border_color;
}

scrolledwindow {
  viewport.frame {
    // avoid double borders when viewport inside scrolled window
    border-style: none;
  }

  // This is used when content is touch-dragged past boundaries.
  // draws a box on top of the content, the size changes programmatically.
  overshoot {
    &.top {
      @include overshoot(top);
    }

    &.bottom {
      @include overshoot(bottom);
    }

    &.left {
      @include overshoot(left);
    }

    &.right {
      @include overshoot(right);
    }
  }

  // Overflow indication, works similarly to the overshoot, the size if fixed tho.
  undershoot {
    &.top {
      @include undershoot(top);
    }

    &.bottom {
      @include undershoot(bottom);
    }

    &.left {
      @include undershoot(left);
    }

    &.right {
      @include undershoot(right);
    }
  }

  junction {
    // the small square between two scrollbars
    border-color: transparent;

    // the border image is used to add the missing dot between the borders, details, details, details...
    border-image: linear-gradient(to bottom, $border_color 1px, transparent 1px) 0 0 0 1 / 0 1px stretch;
    background-color: $base_color;

    &:dir(rtl) {
      border-image-slice: 0 1 0 0;
    }
  }
}

//vbox and hbox separators
separator {
  background: $border_color;
  min-width: 1px;
  min-height: 1px;
}

/*********
 * Lists *
 *********/
list {
  color: $fg_color;
  background-color: $base_color;
  border-color: $border_color;

  row {
    padding: if($compact == true, $container_padding, $container_padding + 4);

    // min-height: ($normal_size + 4);

  }
}

row {
  transition: all 150ms $ease-out-quad;

  &:hover, &:active {
    transition-duration: 50ms;
  }

  &.activatable {
    &.has-open-popup,
    &:hover {
      background-color: if(variant == light, transparentize($fg_color, 0.9), transparentize($fg_color, 0.95));
    }

    &:active {
      //box-shadow: inset 0 2px 2px -2px transparentize(black, 0.8);
      background-color: if(variant == light, transparentize($fg_color, 0.88), transparentize($fg_color, 0.92));
    }

    &:selected {
      &:active {
        //box-shadow: inset 0 2px 3px -1px transparentize(black, 0.5);

      }

      &.has-open-popup,
      &:hover {
        background-color: mix($fg_color, $primary_color, 10%);
      }
    }
  }

  &:selected {
    @extend %selected_items;

    &:hover {
      background-color: _pressed_shade($primary_color);
    }
  }

  checkbutton, radiobutton {
    @include button(flat);

    &:hover, &:checked {
      @include button(flat, $fg_color);
    }

    &:active {
      @include button(flat, $fg_color);
    }
  }
}

list {
  button.image-button {
    border-width: 0px;

    @include button(flat);

    &:hover {
      @include button(flat-hover);
    }

    &:active, &:checked {
      @include button(flat-active);
    }
  }
}

/*********************
 * App Notifications *
 *********************/
.app-notification,
.app-notification.frame {
  @extend %osd;

  padding: $container_padding + 4;
  border-radius: 0;
  background-color: $lighter_bg_color;
  border: 1px solid $border_color;
  box-shadow: $shadow_left $primary_color;

  // mimic shell notifications
  background-clip: padding-box;

  button {
    @include button(normal);

    &.flat {
      @include button(flat);

      &:hover {
        @include button(flat-hover);
      }

      &:active {
        @include button(flat-active);
      }
    }

    &:hover {
      @include button(hover);

      // border-color: $primary_color;

    }

    &:active {
      @include button(active);
    }
  }

  border {
    border: none;
  }
}

/*************
 * Expanders *
 *************/
expander {
  arrow {
    min-width: 16px;
    min-height: 16px;
    -gtk-icon-source: -gtk-icontheme("pan-end-symbolic");

    &:dir(rtl) {
      -gtk-icon-source: -gtk-icontheme("pan-end-symbolic-rtl");
    }

    &:hover {
      color: lighten($fg_color, 30%);
    }

    //only lightens the arrow

    &:checked {
      -gtk-icon-source: -gtk-icontheme("pan-down-symbolic");
    }
  }
}

/************
 * Calendar *
 ***********/
calendar {
  color: $fg_color;
  border: 1px solid $border_color;

  &:selected {
    @extend %selected_items;

    border-radius: 0px;
  }

  &.header {
    border-bottom-color: transparentize(black, 0.9);
  }

  &.button {
    @extend %flat_button;

    color: transparentize($fg_color, 0.55);

    &:hover {
      color: $fg_color;
    }

    &:disabled {
      color: transparentize($disabled_fg_color, 0.55);
    }
  }

  &.highlight {
    color: $disabled_fg_color;
  }

  &:indeterminate {
    color: gtkalpha(currentColor, 0.1);
  }
}

/***********
 * Dialogs *
 ***********/
messagedialog {
  // Message Dialog styling
  .titlebar {
    min-height: 16px;
    background-image: none;
    background-color: $bg_color;
    border-style: none;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
  }

  &.csd {
    // rounded bottom border styling for csd version
    &.background {
      // bigger radius for better antialiasing
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    .dialog-action-area button {
      border-radius: 0;
      border-left-style: solid;
      border-right-style: none;
      border-bottom-style: none;
      margin: 0;
      min-height: $normal_size + 6;

      &:first-child {
        border-left-style: none;
        border-bottom-left-radius: 0px;
        -gtk-outline-bottom-left-radius: 0px;
      }

      &:last-child {
        border-bottom-right-radius: 0px;
        -gtk-outline-bottom-right-radius: 0px;
      }

      @include button(normal);

      &:hover {
        @include button(hover);
      }

      &:active {
        @include button(active);
      }
    }
  }
}

filechooser {
  .dialog-action-box {
    border-top: 1px solid $border_color;
  }

  #pathbarbox {
    border-bottom: 1px solid $bg_color;
  }
}

filechooserbutton:drop(active) {
  box-shadow: none;
  border-color: transparent;
}

/***********
 * Sidebar *
 ***********/
.sidebar, .tweak-categories {
  border-style: none;
  background-color: $alt_bg_color;

  treeview.view {
    background-color: $base_color;

    //$bg_color

  }

  @at-root %sidebar_left,
  &:dir(ltr),
  &.left,
  &.left:dir(rtl) {
    border-right: 1px solid $border_color;
    border-left-style: none;
  }

  @at-root %sidebar_right,
  &:dir(rtl),
  &.right {
    border-left: 1px solid $border_color;
    border-right-style: none;
  }

  list {
    background-color: transparent;
  }

  paned & {
    &.left, &.right, &.left:dir(rtl), &:dir(rtl), &:dir(ltr), & {
      border-style: none;
    }
  }
}

stacksidebar {
  &.sidebar {
    &.left,
    &.left:dir(rtl),
    &:dir(ltr) {
      list {
        @extend %sidebar_left;
      }
    }

    &.right,
    &:dir(rtl) {
      list {
        @extend %sidebar_right;
      }
    }
  }

  row {
    padding: if($compact == true, $container_padding, $container_padding + 4) ($container_padding / 2);

    > label {
      padding-left: $container_padding;
      padding-right: $container_padding;
    }

    &.needs-attention > label {
      @extend %needs_attention;
    }
  }
}

/****************
 * File chooser *
 ****************/
placessidebar {
  > viewport.frame {
    border-style: none;
  }

  list {
    padding: (4px - 3px) 0 4px;
  }

  row {
    // Needs overriding of the GtkListBoxRow padding
    min-height: $normal_size + 8;
    margin: -1px 0;

    // Remove unknown margins
    padding: 0;

    // Using margins/padding directly in the SidebarRow
    // will make the animation of the new bookmark row jump
    > revealer {
      padding: 0 12px;
    }

    &:selected {
      color: $highlighted_fg_color;

      button {
        &:hover, &:active {
          box-shadow: none;
          border-color: transparent;
        }

        &:hover {
          background-color: $semi_fill_color;
        }

        &:active {
          background-color: $fill_color;
        }
      }
    }

    &:disabled {
      color: $disabled_fg_color;
    }

    image.sidebar-icon {
      opacity: $tertiary_opacity;

      // dim the device icons

      &:dir(ltr) {
        padding-right: 8px;
      }

      &:dir(rtl) {
        padding-left: 8px;
      }
    }

    label.sidebar-label {
      &:dir(ltr) {
        padding-right: 2px;
      }

      &:dir(rtl) {
        padding-left: 2px;
      }
    }

    &.sidebar-placeholder-row {
      min-height: 2px;
      padding: 0 8px;
      background-image: image($accent_color);
      background-clip: content-box;
    }

    &.sidebar-new-bookmark-row {
      color: $accent_color;
    }

    &:drop(active):not(:disabled) {
      box-shadow: inset 0 0 0 2px $accent_color;

      &:selected {
        // background-color: $accent_color;
        // color: $highlighted_fg_color;

      }
    }
  }
}

placesview {}

.server-list-button:checked > image {}

// this selects the "connect to server" label
placessidebar > actionbar > revealer > box > label {
  padding-left: 8px;
  padding-right: 8px;
}

/*********
 * Paned *
 *********/
paned {
  > separator {
    min-width: 1px;
    min-height: 1px;
    -gtk-icon-source: none;

    // defeats the ugly default handle decoration
    border-style: none;

    // just to be sure
    background-color: transparent;

    // workaround, using background istead of a border since the border will get rendered twice (?)
    background-image: image($border_color);
    background-size: 1px 1px;

    &:selected {
      //background-image: image($primary_color);

    }

    // FIXME is this needed?

    &.wide {
      min-width: 5px;
      min-height: 5px;
      background-color: $bg_color;
      background-image: image($border_color), image($border_color);
      background-size: 1px 1px, 1px 1px;
    }
  }

  &.horizontal > separator {
    background-repeat: repeat-y;

    &:dir(ltr) {
      margin: 0 -8px 0 0;
      padding: 0 8px 0 0;
      background-position: left;
    }

    &:dir(rtl) {
      margin: 0 0 0 -8px;
      padding: 0 0 0 8px;
      background-position: right;
    }

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-y, repeat-y;
      background-position: left, right;
    }
  }

  &.vertical > separator {
    margin: 0 0 -8px 0;
    padding: 0 0 8px 0;
    background-repeat: repeat-x;
    background-position: top;

    &.wide {
      margin: 0;
      padding: 0;
      background-repeat: repeat-x, repeat-x;
      background-position: bottom, top;
    }
  }
}

/**************
 * GtkInfoBar *
 **************/
infobar {
  color: $highlighted_fg_color;
  border-style: none;

  buttonbox button {
    border-radius: $standard_radius;
  }

  @each $type, $color in ("", $info_color), (".info", $info_color), (".question", $question_color), (".warning", $warning_color), (".error", $error_color) {
    // contextual colors for the infobar (a little lazy )
    &#{$type} {
      background-color: $color;
      box-shadow: $button_highlight $button_highlight_color;
      border-bottom: 1px solid _pressed_shade($color);

      button, button.text-button {
        &:hover, &.default {
          @include button(hover, $color);
        }

        &:active {
          @include button(active, $color);
        }
      }

      button:not(.text-button):not(.flat) {
        &:hover {
          @include button(hover);

          color: _hover_shade($color);
        }

        &:active, &:checked {
          @include button(active);

          color: _pressed_shade($color);
        }
      }

      selection {
        background-color: darken($color, 10%);
      }
    }
  }

  & {
    *:link {
      @extend %link_selected;
    }
  }
}

/************
 * Tooltips *
 ************/
tooltip {
  &, &.background, decoration {
    background-color: $black;
  }

  &.background {
    background-clip: padding-box;
  }

  padding: 2px;

  /* not working */
  border-radius: $standard_radius;
  box-shadow: none;

  * {
    padding: 1px;

    //background-color: transparentize($accent_color, $middle_opacity);
    border-radius: $standard_radius;
    color: $light_fg_color;
  }
}

/*****************
 * Color Chooser *
 *****************/
colorswatch {
  // This widget is made of two boxes one on top of the other, the lower box is colorswatch {} the other one
  // is colorswatch overlay {}, colorswatch has the programmatically set background, so most of the style is
  // applied to the overlay box.

  &:drop(active), & {
    border-style: none;
  }

  // FIXME: implement a proper drop(active) state

  $_colorswatch_radius: $standard_radius;

  // base color corners rounding
  // to avoid the artifacts caused by rounded corner anti-aliasing the base color
  // sports a bigger radius.
  // nth-child is needed by the custom color strip.

  &.top {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-top-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-top-right-radius: $_colorswatch_radius;
    }
  }

  &.bottom {
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-bottom-left-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.left,
  &:first-child:not(.top) {
    border-top-left-radius: $_colorswatch_radius + 0.5px;
    border-bottom-left-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-left-radius: $_colorswatch_radius;
      border-bottom-left-radius: $_colorswatch_radius;
    }
  }

  &.right,
  &:last-child:not(.bottom) {
    border-top-right-radius: $_colorswatch_radius + 0.5px;
    border-bottom-right-radius: $_colorswatch_radius + 0.5px;

    overlay {
      border-top-right-radius: $_colorswatch_radius;
      border-bottom-right-radius: $_colorswatch_radius;
    }
  }

  &.dark overlay {
    color: $highlighted_fg_color;

    &:hover {
      //border-color: if($variant == "light", transparentize(black, 0.2), $border_color);

    }
  }

  &.light overlay {
    color: $fg_color;

    &:hover {
      //border-color: if($variant == "light", transparentize(black, 0.5), $border_color);

    }
  }

  &:drop(active) {
    box-shadow: none;

    &.light overlay {
      border-color: $info_color;
      box-shadow: inset 0 0 0 2px if($variant == "light", darken($info_color, 7%), $border_color), inset 0 0 0 1px $info_color;
    }

    &.dark overlay {
      border-color: $info_color;
      box-shadow: inset 0 0 0 2px if($variant == "light", transparentize(black, 0.7), $border_color), inset 0 0 0 1px $info_color;
    }
  }

  overlay {
    border: 1px solid if($variant == "light", transparentize(black, 0.7), $border_color);

    &:hover {
      //box-shadow: inset 0 1px transparentize(white, 0.6), inset 0 -1px transparentize(black, 0.8);

    }
  }

  &#add-color-button {
    border-radius: $_colorswatch_radius $_colorswatch_radius 0 0;

    &:only-child {
      border-radius: $_colorswatch_radius;
    }

    overlay {
      @include button(normal);

      &:hover {
        @include button(hover);
      }
    }
  }

  &:disabled {
    opacity: 0.5;

    overlay {
      border-color: transparentize(black, 0.4);
      box-shadow: none;
    }
  }

  row:selected & {
    box-shadow: 0 0 0 2px $highlighted_fg_color;
  }

  &#editor-color-sample {
    border-radius: 0px;

    overlay {
      border-radius: 4.5px;
    }
  }
}

// colorscale popup
colorchooser .popover.osd {
  border-radius: 0px;
}

/********
 * Misc *
 ********/
//content view (grid/list)
.content-view {
  background-color: darken($bg_color, 7%);

  //&:hover { -gtk-icon-filter: brightness(1.2); }

  rubberband, .rubberband {
    @extend rubberband;
  }
}

.scale-popup {
  .osd & {
    @extend %osd;
  }

  .osd & button.flat {
    //FIXME: quick hack, redo properly
    border-style: none;

    // border-radius: 0px;

  }

  button {
    // +/- buttons on GtkVolumeButton popup
    &:hover {
      @extend %flat_button;

      background-color: transparentize($fg_color, 0.9);

      // border-radius: 0px;

    }
  }
}

/**********************
 * Window Decorations *
 **********************/

headerbar {
  &:not(:first-child):last-child {
    border-radius: 0 $standard_radius 0 0;
  }

  &:not(:last-child):first-child {
    border-radius: $standard_radius 0 0 0;
  }

  &, &:not(:first-child):last-child {
    // if the only headerbar
    border-radius: $wm_radius $wm_radius 0 0;

    &, &:not(:first-child):last-child, &:not(:last-child):first-child, &:not(:first-child):last-child {
      & {
        .fullscreen &,
        .maximized &,
        .tiled & {
          border-radius: 0px;
        }
      }
    }
  }

  &.default-decoration {
    // round gtk2 windows and try to hide the black background behind the window colors
    border-radius: $wm_radius $wm_radius 0 0;
    box-shadow: _shadow_border(1, 1, 0, 1, $headerbar_bg_color);
    border-width: 1px 1px 0 1px;
    border-style: solid;
    border-color: $headerbar_bg_color;
  }

  &, &.default-decoration {
    .fullscreen &,
    .maximized &,
    .tiled & {
      border-radius: 0px;
    }
  }
}

.titlebar:not(headerbar):not(.path-bar) {
  border-radius: $wm_radius $wm_radius 0 0;

  .fullscreen &,
  .maximized &,
  .tiled & {
    border-radius: 0px;
  }
}

@each $p in "-left", "-right", "-top", "-bottom" {
  window.tiled#{$p} {
    headerbar, .titlebar, paned.titlebar headerbar {
      border-top-left-radius: 0;
      border-top-right-radius: 0;
    }
  }
}

decoration {
  transition: $standard_transition;
  box-shadow: $decoration_shadow;
  background-color: transparent;
  border-radius: ($wm_radius + 1) ($wm_radius + 1) 0 0;

  // FIXME rationalize shadows
  // this is used for the resize cursor area
  margin: 8px;

  .fullscreen &,
  .maximized &,
  .tiled & {
    border-radius: 0px;
    box-shadow: 0 0 2px 2px transparent, 0 0 4px 4px transparent, 0 0 6px 6px transparent, 0 0 8px 8px transparent;
  }

  &:backdrop {
    // the transparent shadow here is to enforce that the shadow extents don't
    // change when we go to backdrop, to prevent jumping windows.
    box-shadow: 0 0 2px 2px $window_shadow, 0 0 4px 4px $window_shadow, 0 0 6px 6px transparent, 0 0 8px 8px transparent;

    .fullscreen &,
    .maximized &,
    .tiled & {
      border-radius: 0px;
      box-shadow: 0 0 2px 2px transparent, 0 0 4px 4px transparent, 0 0 6px 6px transparent, 0 0 8px 8px transparent;
    }
  }

  .ssd & {
    // the wm draws actual shadows
    // the box shadow adds to the dimensions of gtk2 windows otherwise
    &, &:backdrop {
      box-shadow: inset 0 2px $window_shadow;
    }
  }

  .popup &, .csd.popup &, tooltip.csd &, messagedialog.csd & {
    // "half" the regular wm shadow
    box-shadow: 0 0 2px 2px $window_shadow, 0 0 4px 4px $window_shadow;
  }

  .popup & {
    border-radius: 0px;
  }

  .csd.popup & {
    border-radius: $standard_radius $standard_radius 0 0;
  }

  tooltip.csd & {
    border-radius: $standard_radius;
  }

  messagedialog.csd & {
    border-radius: $standard_radius;
  }

  .solid-csd & {
    margin: 0;
    box-shadow: none;
    border-radius: $standard_radius;
  }
}

// Titlebutton //
headerbar,
.titlebar {
  &, &.default-decoration {
    button.titlebutton {
      color: transparent;
      min-width: 0;
      min-height: 0;
      margin: 0;
    }
  }

  button.titlebutton {
    padding: 0;
    box-shadow: none;

    &.close, &.maximize, &.minimize, &:not(.close):not(.maximize):not(.minimize) {
      background-color: transparent;
      background-position: center;
      background-repeat: no-repeat;

      image {
        //color: $fg_color;
        color: transparent;
      }
    }

    // Load png assets for each button
    @each $type in "close", "maximize", "minimize" {
      $class: $type;
      $unmaximize: ", &:not(.close):not(.maximize):not(.minimize)";

      @if $type == "maximize" {
        $class: $type + $unmaximize;
      }

      &.#{$class} {
        background-image: -gtk-scaled(url("assets/titlebutton-#{$type}#{$window_button_suffix}.png"), url("assets/titlebutton-#{$type}#{$window_button_suffix}@2.png"));

        @each $l, $m in (":hover", "-hover"), (":active", "-active") {
          &#{$l} {
            background-image: -gtk-scaled(url("assets/titlebutton-#{$type}#{$m}.png"), url("assets/titlebutton-#{$type}#{$m}@2.png"));
          }
        }
      }
    }
  }
}

headerbar {
  &, &.titlebar, &.default-decoration {
    &:backdrop {
      > * {
        opacity: .5;
        transition: $standard_transition;
      }
    }

    &:not(:backdrop) {
      > * {
        opacity: 1;
        transition: $standard_transition;
      }
    }
  }
}

// catch all extend :)

%selected_items {
  background-color: $primary_color;

  @at-root %nobg_selected_items, & {
    color: $highlighted_fg_color;

    &:disabled {
      color: mix($highlighted_fg_color, $primary_color, 50%);
    }
  }
}

:selected button {
  // TODO: find out why this is here
  background-color: transparent;

  label, image {
    color: $highlighted_fg_color;
  }

  &:hover {
    background-color: $semi_fill_color;
  }

  &:active {
    background-color: $fill_color;
  }
}

.monospace {
  font-family: monospace;
}

/**********************
 * Touch Copy & Paste *
 *********************/
// TODO: these assets aren't being used anymore
//touch selection handlebars for the Popover.osd above
.entry.cursor-handle,
.cursor-handle {
  background-color: transparent;
  background-image: none;
  box-shadow: none;
  border-style: none;

  &.top {
    -gtk-icon-source: -gtk-icontheme("selection-start-symbolic");
  }

  &.bottom {
    -gtk-icon-source: -gtk-icontheme("selection-end-symbolic");
  }
}

.context-menu {
  font: initial;

  label {
    transition: none;
  }
}

// Decouple the font of context menus from their entry/textview

// shortcut window keys
.keycap {
  min-width: 20px;
  min-height: 25px;
  margin-top: 2px;
  padding-bottom: 3px;
  padding-left: 6px;
  padding-right: 6px;
  color: $fg_color;
  background-color: $base_color;
  border: 1px solid;
  border-color: if($variant == "light", mix($border_color, $bg_color, 50%), $border_color);
  border-radius: 0px;
  box-shadow: if($variant == "light", inset 0 -3px mix($base_color, $bg_color, 20%), inset 0 -3px mix($border_color, $base_color, 60%));
  font-size: smaller;
}

:not(decoration):not(window):drop(active):focus,
:not(decoration):not(window):drop(active) {
  // FIXME needs to be done widget by widget, this wildcard should really die
  border-color: $info_color;
  box-shadow: inset 0 0 0 1px $info_color;
  caret-color: $info_color;
}
